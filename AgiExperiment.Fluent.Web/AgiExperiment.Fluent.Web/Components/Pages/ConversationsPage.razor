@page "/conversations"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular

@rendermode InteractiveServer

@inject IToastService ToastService
@inject IDialogService dialogService

@attribute [Authorize]
<PageTitle>History</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h3>History</h3>
        </div>
        <div class="col">
            @if (Conversations.Any())
            {
                <FluentButton Disabled="@(SelectedItems == null || !SelectedItems.Any())" OnClick="DeleteSelectedConversations">Delete selected</FluentButton>
            }
            else
            {
                <FluentNavLink Href="/conversation">
                    Start a new Conversation
                </FluentNavLink>
            }
        </div>
    </div>
</div>

<FluentDataGrid ID="grid" Items="@Conversations.AsQueryable()" ShowHover="@true" TGridItem="ConversationModel">
    <SelectColumn TGridItem="ConversationModel"
    SelectMode="@DataGridSelectMode.Multiple"
    Property="@(e => e.Selected)"
    OnSelect="@(e => e.Item.Selected = e.Selected)"
    SelectAll="@(Conversations.All(p => p.Selected))"
    SelectAllChanged="@(all => Conversations.ToList().ForEach(p => p.Selected = (all == true)))"/>
    <PropertyColumn Title="Summary" Property="@(c => c!.Summary)" Align="Align.Start" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Load conversation" IconEnd="@(new Size16.Navigation())" OnClick="@(() => NavigateTo(context))" />
        <FluentButton aria-label="Delete conversation" IconEnd="@(new Size16.Delete())" OnClick="@(() => Remove(context))" />
    </TemplateColumn>
</FluentDataGrid>

@code {
    [Inject]
    public IDbContextFactory<AiExperimentDBContext> DbContextFactory { get; set; } = null!;

    [Inject]
    public ConversationsRepository ConversationsRepository { get; set; } = null!;

    public record ConversationModel
    {
        public Guid Id { get; set; }
        public string Summary { get; set; }
        public bool Selected { get; set; }
    }

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    FluentDataGrid<Conversation>? grid;

    List<ConversationModel> Conversations { get; set; } = new();

    IEnumerable<ConversationModel> SelectedItems;


    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    public string? UserId { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState?.User;
        if (user?.Identity is not null && user.Identity.IsAuthenticated)
        {
            UserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        }

        await LoadConversations();
    }

    public async Task LoadConversations()
    {
        var items = await ConversationsRepository.GetConversationsByUserId(UserId);
        foreach (var item in items)
        {
            var modelItem = new ConversationModel();
            modelItem.Id = item.Id.Value;
            modelItem.Summary = item.Summary;
            Conversations.Add(modelItem);
        }
        SelectedItems = Conversations.Where(p => p.Selected);
        StateHasChanged();
    }

    private async Task Remove(ConversationModel conversation)
    {
        IDialogReference dialog = await dialogService.ShowConfirmationAsync(
            "Are you sure you want to delete conversation?",
            "Yes",
            "No",
            "Delete Conversation?");

        DialogResult? result = await dialog.Result;

        // If cancelled, return
        if (result.Cancelled)
        {
            return;
        }

        if (await ConversationsRepository.DeleteConversation((Guid)conversation.Id!))
        {
            Conversations.Remove(conversation);

            var message = $"Conversation deleted";
            ToastService.ShowToast(ToastIntent.Info, message);
        }
    }

    // private async Task EditRow(Conversation value)
    // {
    //     await grid!.EditRow(value);
    // }

    // private async Task UpdateSummary(Conversation value)
    // {
    //     await using var ctx = await DbContextFactory.CreateDbContextAsync();
    //     var c = ctx.Conversations.FirstOrDefault(c => c.Id == value.Id);
    //     c.Summary = value.Summary;
    //     await ctx.SaveChangesAsync();

    //     grid!.CancelEditRow(value);
    // }

    // private async Task CancelEdit(Conversation value)
    // {
    //     grid!.CancelEditRow(value);
    //     await LoadConversations();
    //     await grid.Reload();
    // }

    private async Task NavigateTo(ConversationModel conversation)
    {
        NavigationManager.NavigateTo("/conversation/" + conversation.Id);
    }

    private async Task DeleteSelectedConversations()
    {
        IDialogReference dialog = await dialogService.ShowConfirmationAsync(
            "Are you sure you want to delete the selected conversation(s)?",
            "Yes",
            "No",
            "Delete Conversation?");

        DialogResult? result = await dialog.Result;

        // If cancelled, return
        if (result.Cancelled)
        {
            return;
        }

        foreach (var c in SelectedItems!.ToList())
        {
            await ConversationsRepository.DeleteConversation((Guid)c.Id!);
            Conversations.Remove(c);
        }

        SelectedItems = Conversations.Where(p => p.Selected);

        var message = $"Conversation(s) deleted";
        ToastService.ShowToast(ToastIntent.Info, message);
    }
}
